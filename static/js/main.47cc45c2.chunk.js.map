{"version":3,"sources":["TodoListItem.tsx","hooks/usePersistedState.ts","TodoList.tsx","AddTodoForm.tsx","AddTodoListForm.tsx","App.tsx","index.tsx"],"names":["TodoListItem","todo","classes","toggleTodo","makeStyles","theme","textField","margin","spacing","button","formControl","minWidth","selectEmpty","marginTop","root","width","maxWidth","backgroundColor","palette","background","paper","nested","paddingLeft","useStyles","key","defaultValue","storageItem","localStorage","getItem","React","useState","JSON","parse","state","setState","useEffect","setItem","stringify","usePersistedState","inputChecked","setInputChecked","ListItem","role","undefined","dense","className","onClick","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","text","ListItemText","primary","TodoList","project","title","todos","listTodos","filter","item","open","setOpen","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","map","AddTodoForm","addTodo","todoLists","setText","setProject","length","TextField","variant","required","id","label","value","onChange","e","target","InputProps","startAdornment","InputAdornment","position","Assignment","FormControl","InputLabel","htmlFor","Select","native","name","list","Button","color","startIcon","type","size","disabled","parseInt","preventDefault","AddTodoListForm","addTodoList","initialTodos","initialLists","App","setTodoLists","setTodos","selectedTodo","newTodos","complete","aria-labelledby","subheader","ListSubheader","newTodo","newTodoList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47cc45c2.chunk.js","sourcesContent":["import React from 'react';\nimport {ListItem, ListItemText} from \"@material-ui/core\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport {usePersistedState} from \"./hooks/usePersistedState\";\n\ninterface Props {\n    todo: Todo;\n    toggleTodo: ToggleTodo;\n}\n\nexport const TodoListItem: React.FC<Props> = ({todo, toggleTodo}) => {\n\n    const useStyles = makeStyles((theme) => ({\n        textField: {\n            margin: theme.spacing(1),\n        },\n        button: {\n            margin: theme.spacing(1),\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n        root: {\n            width: '100%',\n            maxWidth: 360,\n            backgroundColor: theme.palette.background.paper,\n        },\n        nested: {\n            paddingLeft: theme.spacing(4),\n        },\n    }));\n\n    const classes = useStyles();\n    const [inputChecked, setInputChecked] = usePersistedState(\"checkbox_\" + todo.key, false);\n\n    return (\n        <ListItem key={todo.key} role={undefined} dense button className={classes.nested}\n                  onClick={() => setInputChecked(!inputChecked)}>\n            <ListItemIcon>\n                <Checkbox\n                    edge=\"start\"\n                    checked={inputChecked}\n                    tabIndex={-1}\n                    disableRipple\n                    inputProps={{'aria-labelledby': todo.text}}\n                />\n            </ListItemIcon>\n            <ListItemText primary={todo.text}/>\n        </ListItem>\n    );\n};","import React, {useEffect} from \"react\";\n\nexport const usePersistedState = (key: any, defaultValue: any = \"\") => {\n    const storageItem = localStorage.getItem(key) || null;\n\n    const [state, setState] = React.useState(\n        storageItem ? JSON.parse(storageItem) : defaultValue\n    );\n\n    useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(state));\n    }, [key, state]);\n\n    return [state, setState];\n}","import React from 'react';\nimport {TodoListItem} from './TodoListItem';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {ExpandLess, ExpandMore} from '@material-ui/icons';\nimport List from '@material-ui/core/List';\nimport Collapse from '@material-ui/core/Collapse';\n\ninterface Props {\n    project: number;\n    title: string;\n    todos: Todo[];\n    toggleTodo: ToggleTodo;\n}\n\nexport const TodoList: React.FC<Props> = ({project, title, todos, toggleTodo}) => {\n    const listTodos = todos.filter(item => item.project === project);\n\n    const [open, setOpen] = React.useState(true);\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    return (\n        <>\n            <ListItem button onClick={handleClick}>\n                <ListItemText primary={title}/>\n                {open ? <ExpandLess/> : <ExpandMore/>}\n            </ListItem>\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                <List component=\"div\" disablePadding>\n                    {\n                        listTodos.map(todo => (\n                            <TodoListItem key={todo.key} todo={todo} toggleTodo={toggleTodo}/>\n                        ))\n                    }\n                </List>\n            </Collapse>\n        </>\n    );\n};","import React, {useState} from 'react';\nimport {Button} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport {makeStyles} from '@material-ui/core/styles';\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport {Assignment} from \"@material-ui/icons\";\n\ninterface Props {\n    addTodo: AddTodo;\n    todoLists: TodoList[];\n}\n\nexport const AddTodoForm: React.FC<Props> = ({addTodo, todoLists}) => {\n    const [text, setText] = useState('');\n    const [project, setProject] = useState('');\n\n    const useStyles = makeStyles((theme) => ({\n        textField: {\n            margin: theme.spacing(1),\n        },\n        button: {\n            margin: theme.spacing(2),\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }));\n\n    const classes = useStyles();\n\n    const addTodoItem = (e: any) => {\n        e.preventDefault();\n        addTodo(text, parseInt(project));\n        setText('');\n    }\n\n    const handleChange = (e: any) => {\n        setProject(e.target.value);\n    }\n\n    if (todoLists.length === 0) {\n        return (<></>);\n    }\n\n    return (\n        <form>\n            <TextField\n                variant=\"filled\"\n                className={classes.formControl}\n                required\n                id={\"task\"}\n                label={\"Task\"}\n                value={text}\n                onChange={e => {\n                    setText(e.target.value);\n                }}\n                InputProps={{\n                    startAdornment: (\n                    <InputAdornment position=\"start\">\n                    <Assignment />\n                    </InputAdornment>\n                    ),\n                }\n                }/>\n            <FormControl variant=\"filled\" className={classes.formControl}>\n                <InputLabel htmlFor=\"project\">Project</InputLabel>\n                <Select\n                    native\n                    value={project}\n                    onChange={handleChange}\n                    inputProps={{\n                        name: 'project',\n                        id: 'project',\n                    }}\n                >\n                    {todoLists.map(list => (\n                        <option key={list.key} value={list.key}>{list.text}</option>\n                    ))}\n\n                </Select>\n            </FormControl>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                startIcon={<AddIcon/>}\n                type=\"submit\"\n                size=\"large\"\n                disabled={ (!parseInt(project) || !text.length) }\n                onClick={addTodoItem}\n            >\n                Add Todo\n            </Button>\n        </form>\n    );\n};\n","import React, {useState} from 'react';\nimport {Button} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport {List} from \"@material-ui/icons\";\n\ninterface Props {\n    addTodoList: AddTodoList;\n}\n\nexport const AddTodoListForm: React.FC<Props> = ({addTodoList}) => {\n    const [text, setText] = useState('');\n\n    const useStyles = makeStyles((theme) => ({\n        textField: {\n            margin: theme.spacing(1),\n        },\n        button: {\n            margin: theme.spacing(2),\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }));\n\n    const classes = useStyles();\n\n    const addList = (e: any) => {\n        e.preventDefault();\n        addTodoList(text);\n        setText('');\n    }\n\n    const handleChange = (e: any) => {\n        setText(e.target.value);\n    }\n\n    return (\n        <form>\n            <TextField\n                variant=\"filled\"\n                className={classes.formControl}\n                required\n                id={\"list\"}\n                label={\"Name\"}\n                value={text}\n                onChange={handleChange}\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                            <List/>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                startIcon={<AddIcon/>}\n                type=\"submit\"\n                size=\"large\"\n                disabled={!text}\n                onClick={addList}\n            >\n                Add List\n            </Button>\n        </form>\n    );\n}\n","import React, {useState} from 'react';\nimport {TodoList} from './TodoList';\nimport {AddTodoForm} from './AddTodoForm';\nimport {AddTodoListForm} from './AddTodoListForm';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport {makeStyles} from '@material-ui/core/styles';\n\nconst initialTodos: Todo[] = JSON.parse(localStorage.getItem('todos') ?? '[]');\nconst initialLists: TodoList[] = JSON.parse(localStorage.getItem('todoLists') ?? '[]');\n\nfunction App() {\n    const [todoLists, setTodoLists] = useState(initialLists);\n    const [todos, setTodos] = useState(initialTodos);\n\n    const toggleTodo: ToggleTodo = (selectedTodo: Todo) => {\n        const newTodos = todos.map(todo => {\n            if (todo === selectedTodo) {\n                return {\n                    ...todo,\n                    complete: !todo.complete,\n                };\n            }\n            return todo;\n        });\n\n\n        setTodos(newTodos);\n        localStorage.setItem('todos', JSON.stringify(newTodos));\n    };\n\n    const addTodo: AddTodo = (text: string, project: number) => {\n        const newTodo = {key: todos.length + 1, text, project, complete: false};\n        setTodos([...todos, newTodo]);\n        localStorage.setItem('todos', JSON.stringify([...todos, newTodo]));\n    };\n\n    const addTodoList: AddTodoList = (text: string) => {\n        const newTodoList = {key: todoLists.length + 1, text};\n        setTodoLists([...todoLists, newTodoList]);\n        localStorage.setItem('todoLists', JSON.stringify([...todoLists, newTodoList]));\n    };\n\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            width: '100%',\n            maxWidth: 360,\n            backgroundColor: theme.palette.background.paper,\n        },\n        nested: {\n            paddingLeft: theme.spacing(4),\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <List\n                component=\"nav\"\n                aria-labelledby=\"nested-list-subheader\"\n                subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                        ToDos\n                    </ListSubheader>\n                }\n                className={classes.root}\n            >\n                {todoLists.map(list => (\n                    <TodoList key={list.key} project={list.key} title={list.text} todos={todos}\n                              toggleTodo={toggleTodo}/>\n                ))}\n            </List>\n            <AddTodoForm addTodo={addTodo} todoLists={todoLists}/>\n            <AddTodoListForm addTodoList={addTodoList}/>\n        </>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}